/*** @author Leo Linbeck III*/include(ds.getModelFolder().path + 'parsing/dbAccessFunctions.js', true);var bpURL = 'http://ballotpedia.org'; // connect to an HTTP servervar HTMLText = ''function bpGetNextToken(start) {	var finish = mark = 0;	var token = params = '';		if (HTMLText[start] == '<') {		token = HTMLText.slice(start, HTMLText.indexOf('>', start) + 1);		finish = start + token.length;		mark = token.indexOf(' ');		if (mark != -1) {			params = token.slice(mark + 1, token.length - 1);			token = token.slice(0, mark) + '>';		}	}	else {		finish = HTMLText.indexOf('<', start);		token = HTMLText.slice(start, finish);	}				return { 'token': token.trim(), 'params': params, 'start': start, 'finish': finish };}function bpSeekNextCandidate(start, election) {	var reArray;		while (start < election.length - 1) {		if (election[start].token == '<a>') {			reArray = /title="([^=]+)"/.exec(election[start].params);			if (election[start + 1].token == reArray[1])				return start;		}		start++;	}		return election.length - 1;}function bpSetupRunoff(election, indx) {	var votes = 0;	var won = false;	var token, params;		indx++	token = election[indx].token;	var reArray = /^([\d,]+)/.exec(token);	if (reArray != null)		votes = Number(reArray[1].replace(',',''));			reArray = /title="([^=]+)"/.exec(election[indx].params);	if (reArray != null) {		token = reArray[1];		if (token == 'Approved' || token == 'Won') {			won = true;			indx++		}	}	return {'indx': indx, 'votes': votes, 'won': won };}function bpProcessCandidate(start, finish, e, election) {	var reArray, partyCode, c, p, r;	//	if (start == finish)//		return;//		var name = '';	var url = '';	var incumbent = false;	var won = false;	var firstElected = null;	var votes = 0;	var inRunoff = false;	var runoff = {};		for (indx = start; indx <= finish; indx++) {		token = election[indx].token;		if (token == 'Primary Runoff:') {			runoff = bpSetupRunoff(election, indx);			inRunoff = true;			indx = runoff.indx;		}		else if (token == '<a>') {			reArray = /title="([^=]+)"/.exec(election[indx].params);			title = reArray[1];			if (title == 'Approved' || title == 'Won')				won = true;		}		else {			reArray = /^([\d,]+)/.exec(token);			if (reArray != null)				votes = Number(reArray[1].replace(',',''));			else {				reArray = /Incumbent\D+(\d{4})/.exec(token);				if (reArray != null) {					incumbent = true;					firstElected = Number(reArray[1]);				}				else {					reArray = /href="(.+)".title="([^=]+)"/.exec(election[indx-1].params);					if (reArray != null) {						url = reArray[1];						if (token == reArray[2])							name = token;					}				}			}		}	}		if (name != '') {		if (e.general) {			c = ds.Candidate.find('election.district.ID = :1 and election.year = :2 and politician.fullName = :3', e.district.ID, e.year, name);			if (c == null)				p = getOrCreatePolitician(name, url, firstElected, partyCode, e.district.state);			else				p = c.politician;		}		else			p = getOrCreatePolitician(name, url, firstElected, partyCode, e.district.state);				if (e.runoff) {			if (e.primary)				r = ds.Candidate.find('election.district.ID = :1 and election.year = :2 and politician.fullName = :3 and election.primary = true', e.district.ID, e.year, name);			else				r = ds.Candidate.find('election.district.ID = :1 and election.year = :2 and politician.fullName = :3 and election.general = true', e.district.ID, e.year, name);						r.advancedToRunoff = true;			r.won = false;			incumbent = r.incumbent;			r.save();		}			c = getOrCreateCandidate(p, e, votes, incumbent, won);				if (inRunoff) {			c.won = false;			c.advancedToRunoff = true;			c.save();			eRunoff = getOrCreateElection(e.district, e.year, e.type + ' Runoff');			eRunoff.party = e.party;			eRunoff.save();			c = getOrCreateCandidate(p, eRunoff, runoff.votes, incumbent, won);		}	}}function bpProcessElection(mark, e, election) {	var start, finish;	try {		ds.startTransaction();		finish = mark;		do {			start = bpSeekNextCandidate(finish, election);			finish = bpSeekNextCandidate(start + 1, election);			if (finish < (election.length - 1))				bpProcessCandidate(start + 1, finish - 1, e, election);			else				bpProcessCandidate(start + 1, finish, e, election);		} while (finish < election.length - 1);		ds.commit();	} catch(error) {		failure.push(e);		ds.rollBack();	}}function bpProcessAllElections(d, election, eLast) {	var reArray;	var token, params;	var e = p = {};				token = election[0].token	params = election[0].params	if (token == '<a>') {		reArray = /href="(.+)".title="([^=]+)"/.exec(params);		if (reArray == null)			return eLast;		p = ds.Party.find('abbreviation = :1', reArray[2][0]);		if (p == null)			return eLast;		e = getOrCreateElection(d, 2010, p.name + ' Primary');		e.party = p;		e.save();		bpProcessElection(2, e, election);	}	else if (token.indexOf('runoff') != -1) {		e = getOrCreateElection(d, 2010, eLast.type + ' Runoff');		e.party = eLast.party;		e.save();		bpProcessElection(1, e, election);	}	else if (token.indexOf('General election') != -1) {		e = getOrCreateElection(d, 2010, 'General Election');		bpProcessElection(1, e, election);	}		return e;}function bpProcessHouseDistrict(array, dNum, start, finish) {	for (var i = start + 1; i < finish; i+=2) {		var partyName = array[i].params.title;		var polName = array[i+1].params.title;		var polURL = array[i+1].params.url;	}}function bpProcessAllHouseDistrict(array, state) {	var re = [];	var d = [];		for (var i = 0; i < array.length; i++) {		re = /\/wiki\/index.php\/.+\'s_(\w.)\w\w_congressional/.exec(array[i]);		if(re != null)			continue;		d.push({			number: re[1],			mark: i		});			}		for (var i = 0; i < d.length - 1; i++) {		bpProcessHouseDistrict(array, d[i].number, d[i].mark, d[i+1].mark);	}	bpProcessHouseDistrict(array, d[i].number, d[i].mark, d.length);}function bpParseUSSenate(state) {	var reArray, d, tag, incr;	var oArray = [];		var pagePath = '/wiki/index.php/United_States_Senate_elections_in_'	var pageSuffix = ',_2012';	var token = '<big><b>General election candidates</b></big><br />';	var endToken = '<h3> <span class="mw-headline"'		bpGetPage(bpURL + pagePath + state + pageSuffix); 	var start = HTMLText.indexOf(token, finish); 	if (start == -1) 		return;	var finish = HTMLText.indexOf(endToken, start + token.length);	if (finish == -1)		return;		var mark = start;	while (mark < finish) {		obj = bpGetNextToken(mark);		if (obj.token == '<a>')			oArray.push(obj);		mark = obj.finish;	}		if (oArray.length > 0)		bpProcessSenateDistrict(oArray, state);	oArray.length = 0;}function bpParseUSHouse(state) {	var reArray, d, tag, incr;	var oArray = [];		var token = '<h2> <span class="mw-headline" id="General_election_candidates">General election candidates</span></h2>';	var endToken = '</table>'		bpGetPage(bpURL + obj.params.url); 	var start = HTMLText.indexOf(token, finish); 	if (start == -1) 		return;	var finish = HTMLText.indexOf(endToken, start + token.length);	if (finish == -1)		return;		var mark = start;	while (mark < finish) {		obj = bpGetNextToken(mark);		if (obj.token == '<a>')			oArray.push(obj);		mark = obj.finish;	}		if (oArray.length > 0)		bpProcessHouseDistrict(oArray, state);	oArray.length = 0;}function bpParseStateExecutives(state) {	}function bpParseStateSenate(state) {	}function bpParseStateHouse(state, obj) {	}function bpParseBallotMeasures(state, obj) {	}function bpGetPage(URL) {	var xhr, result;   	xhr = new XMLHttpRequest(); // instanciate the xhr object	   	xhr.onreadystatechange = function() { // event handler		var state = this.readyState;		if (state !== 4)			return;				HTMLText = this.responseText;	 }; 	   	xhr.open('GET', URL); // to connect to a Web site	xhr.send(); // send the request} function bpGetRaces(state) {	var d = [];	var reArray = [];	var obj = {};		var startTag = '<th colspan="2" align="center" style="background-color:#008000; color: white;">';//	var startTag = '<table class="wikitable" cellspacing="0" cellpadding="5" border="1" style="width:400px;">'	var endTag = '</table>';	var pagePath = '/wiki/index.php/'	var pageSuffix = '_elections,_2012';		bpGetPage(bpURL + pagePath + state + pageSuffix);		var m = 4980;	var x = [];	for (var i = 0; i < startTag.length; i++) {		var b = startTag[i] == HTMLText[i + m];		x.push(b);	}	var start = HTMLText.indexOf(startTag, 0);	if (start == -1)		return [];	start += startTag.length;		do {		obj = bpGetNextToken(start);		start = obj.finish;		if (obj.token == '<a>') {			reArray = /href="(.+)".title="(.+)"/.exec(obj.params);			if (reArray == null)				continue;			obj = bpGetNextToken(start);			start = obj.finish;			obj.params = {url: reArray[1], title: reArray[2]};			d.push(obj);		}	} while (obj.token != endTag);		return d;}function bpParseState(state) {	bpParseUSSenate(state);	bpParseUSHouse(state);	bpParseStateExecutives(state);	bpParseStateSenate(state);	bpParseStateHouse(state);	bpParseBallotMeasures(state);}function bpRemoveAllRecords(remove) {	if (remove) {		ds.District.all().remove();		ds.Election.all().remove();		ds.Politician.all().remove();		ds.Campaign.all().remove();		ds.Party.all().remove();		ds.District.setAutoSequenceNumber(1);		ds.Election.setAutoSequenceNumber(1);		ds.Politician.setAutoSequenceNumber(1);		ds.Campaign.setAutoSequenceNumber(1);		ds.Party.setAutoSequenceNumber(1);	}}function bpParseAllElections() {	var pagePath = '/wiki/index.php/'	var pageSuffix = '_elections,_2012';	var state;		bpRemoveAllRecords(true);//	var stateArray = ds.State.query('ID <= :1', 50).toArray('name');		//	for (var indx = 0; indx < stateArray.length; indx++) {//	for (var indx = 0; indx < 3; indx++) {		//		bpParseState(stateArray[indx].name);//	}	bpParseState('OH');}bpParseAllElections();//function showResults() {//	result += 'Totals for all states:\n';//	result += '   Candidates = ' + ds.Candidate.all().count() + '\n';//	result += '   Politicians = ' + ds.Politician.all().count() + '\n';//	result += '   Elections = ' + ds.Election.all().count() + '\n';//	result += '   Districts = ' + ds.District.all().count() + '\n';//	return result;//}//showResults();