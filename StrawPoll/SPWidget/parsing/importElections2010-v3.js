/*** @author Leo Linbeck III*/include(ds.getModelFolder().path + 'dbAccessFunctions.js', true);function processElection(data) {		var candidate = {};	var finalist = {};	var politician = {};	var dPrimary = {};	var dPrimaryRunoff = {};	var rPrimary = {};	var rPrimaryRunoff = {};	var incumbentRunning = primaryUpset = runoffUpset = false;	var indx = 0;	var politicianName = '';		var state = ds.State.find('name = :1', data[0]);	if (state == null)		return false;		var district = getOrCreateDistrict(state, data[1], 'US House');		if (data[15] != 0) {		dPrimary = getOrCreateElection(district, 2010, 'Democratic Primary')		primaryUpset = (data[15] != 'Uncontested') && (data[15] != 'No Primary') && (Number(data[16]) > Number(data[15]));		runoffUpset = Number(data[33]) > Number(data[32]);		incumbentRunning = data[29] == 'Y';				for (indx = 15; indx < 24; indx++) {			if (data[indx] == '0')				break;							if (indx == 15 && incumbentRunning) {				politicianName = data[2].replace('"','').replace('"','');				if (politicianName[0] == '[') {					politicianName = politicianName.slice(10,politicianName.length-1);					politician = getOrCreatePolitician(politicianName, null, null, 'D', state);				}				else					politician = getOrCreatePolitician(politicianName, null, data[3], 'D', state);			}			else						politician = getOrCreatePolitician(district.name + ' Democratic Candidate ' + (indx-14), null, null, 'D', state);							if (indx == 15) {									if (data[indx] == 'Uncontested' || data[indx] == 'No Primary' || data[indx] == 0)					candidate = getOrCreateCandidate(politician, dPrimary, null, incumbentRunning, true);				else					candidate = getOrCreateCandidate(politician, dPrimary, data[indx], incumbentRunning, !primaryUpset);				if (data[32] != 0) {					candidate.won = false;					candidate.advancedToRunoff = true;					candidate.save();										dPrimaryRunoff = getOrCreateElection(district, 2010, 'Democratic Primary Runoff')					candidate = getOrCreateCandidate(politician, dPrimaryRunoff, data[32], incumbentRunning, !runoffUpset);				}			}			else if (indx == 16) {				if (data[32] != 0) {					candidate = getOrCreateCandidate(politician, dPrimaryRunoff, data[33], false, runoffUpset);										candidate = getOrCreateCandidate(politician, dPrimary, data[indx], false, false);					candidate.advancedToRunoff = true;					candidate.save();				}				else					candidate = getOrCreateCandidate(politician, dPrimary, data[indx], false, primaryUpset);			}			else				candidate = getOrCreateCandidate(politician, dPrimary, data[indx], false, false);		}	}	if (data[41] != 0) {		rPrimary = getOrCreateElection(district, 2010, 'Republican Primary')		primaryUpset = (data[41] != 'Uncontested') && (data[41] != 'No Primary') && (Number(data[42]) > Number(data[41]));		runoffUpset = Number(data[63]) > Number(data[62]);		incumbentRunning = data[59] == 'Y';		for (indx = 41; indx < 53; indx++) {			if (data[indx] == '0')				break;							if (indx == 41 && incumbentRunning) {				politicianName = data[2].replace('"','').replace('"','');				if (politicianName[0] == '[') {					politicianName = politicianName.slice(10,politicianName.length-1);					politician = getOrCreatePolitician(politicianName, null, null, 'R', state);				}				else					politician = getOrCreatePolitician(politicianName, null, data[3], 'R', state);			}			else						politician = getOrCreatePolitician(district.name + ' Republican Candidate ' + (indx-40), null, null, 'R', state);							if (indx == 41) {				if (incumbentRunning) {					politician.fullName = data[2].replace('"','').replace('"','');					if (politician.fullName[0] == '[')						politician.fullName = politician.fullName.slice(10,politician.fullName.length-1);					else						politician.firstElected = data[3];					politician.save();				}				if (data[indx] == 'Uncontested' || data[indx] == 'No Primary' || data[indx] == 0)					candidate = getOrCreateCandidate(politician, rPrimary, null, incumbentRunning, true);				else					candidate = getOrCreateCandidate(politician, rPrimary, data[indx], incumbentRunning, !primaryUpset);								if (data[62] != 0) {					candidate.won = false;					candidate.advancedToRunoff = true;					candidate.save();										rPrimaryRunoff = getOrCreateElection(district, 2010, 'Republican Primary Runoff')					candidate = getOrCreateCandidate(politician, rPrimaryRunoff, data[62], incumbentRunning, !runoffUpset);				}			}			else if (indx == 42) {				if (data[62] != 0) {					candidate = getOrCreateCandidate(politician, rPrimaryRunoff, data[63], false, runoffUpset);										candidate = getOrCreateCandidate(politician, rPrimary, data[indx], false, false);					candidate.advancedToRunoff = true;					candidate.save();				}				else					candidate = getOrCreateCandidate(politician, rPrimary, data[indx], false, primaryUpset);			}			else				candidate = getOrCreateCandidate(politician, rPrimary, data[indx], false, false);		}	}		var general = getOrCreateElection(district, 2010, 'General Election')		var finalists = ds.Candidate.query('election.district.ID = :1 and won = true', district.ID);		for (indx = 0; indx < finalists.length; indx++) {		finalist = finalists[indx];		if (finalist.politician.party.abbreviation == 'R')			if (data[72] == 'Uncontested')				candidate = getOrCreateCandidate(finalist.politician, general, null, finalist.incumbent, data[8] == 'R');			else				candidate = getOrCreateCandidate(finalist.politician, general, data[72], finalist.incumbent, data[8] == 'R');		else if (finalist.politician.party.abbreviation == 'D')			if (data[71] == 'Uncontested')				candidate = getOrCreateCandidate(finalist.politician, general, null, finalist.incumbent, data[8] == 'D');			else				candidate = getOrCreateCandidate(finalist.politician, general, data[71], finalist.incumbent, data[8] == 'D');	} 			if (data[73] != 0) {		politician = getOrCreatePolitician(district.name + ' Third Party Candidate', null, null, 'U', state);		candidate = getOrCreateCandidate(politician, general, data[73], false, false);	}	return null;}   // Main functionfunction doImportElections () {	var electLine = '';    var dataStream = TextStream( ds.getModelFolder().path + 'Election Data 2010.txt', 'read');		while ( electLine = dataStream.read('') )		processElection(electLine.split('\t'));					return null;	}//ds.Candidate.all().remove();//ds.Politician.all().remove();doImportElections();