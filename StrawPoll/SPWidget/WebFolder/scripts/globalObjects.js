/*** @author Leo Linbeck III*///	String.prototype.toTitleCase = function(s) {return s.replace(/\b([a-z])/g, function (_, i) { return i.toUpperCase();}); }var L3 = L3 || {};L3.getGlobal = function getGlobal() {	var ec = ds.GlobalConstant.all();	if (ec.length > 1)		alert('More than one GlobalConstant entity found!');	if (ec.length == 0) {		var e = ds.GlobalConstant.newEntity();		e.versionNumber = 'v0.1';		e.save();	}	else		var e = L3.globalEntityCollection.getEntity(0);	return e;}	L3.currentPage = ''L3.msgAddressVerified = 'Address verified - click button to start';L3.msgAddressUnverified = 'This address has not been verified';L3.msgAddressInvalid = 'This address is not valid';L3.msgVerifyingAddress = 'Verifying address - please wait...';L3.toTitleCase = function toTitleCase(s) {	return s.replace(/\b([a-z])/g, function (_, i) {  			return i.toUpperCase();  		}  	);}L3.slideRightGrid = function slideRightGrid(a) {	var newPage = sources[a].page;	if (newPage != L3.currentPage) {		$('#' + newPage).addClass('spSendToBack');		$$(newPage).show();		$('#' + L3.currentPage).fadeOut('fast', function() {				$('#' + L3.currentPage).removeClass('spBringToFront');				$('#' + newPage).removeClass('spSendToBack');				$('#' + newPage).addClass('spBringToFront');				L3.currentPage = newPage;			});	}}L3.stack = [];	L3.slideLeftSimple = function slideLeftSimple(newPage) {	if (L3.stack[L3.stack.length-1] != newPage) {		L3.stack.push(newPage);		$('#' + newPage).css('z-index', 50000 - (1000 * L3.stack.length));		$$(newPage).show();		$('#' + L3.stack[L3.stack.length-2]).hide('slide', {direction: 'left'}, function() {				$$('containerMenuBar').show();			});	}}L3.slideRightSimple = function slideRightSimple() {	$('#' + L3.stack[L3.stack.length-2]).show('slide', {direction: 'left'}, function() {			$$(L3.stack[L3.stack.length-1]).hide();			L3.stack.pop();			if (L3.stack.length == 1)				$$('containerMenuBar').hide();			else				$$('containerMenuBar').show();		});}	L3.slideRightMultiple = function slideRightJump(n) {	$('#' + L3.stack[L3.stack.length-n-2]).show('slide', {direction: 'left'}, function() {			$$(L3.stack[L3.stack.length-1]).hide();			for (var i = 0; i <= n; i++ )				L3.stack.pop();			if (L3.stack.length == 1)				$$('containerMenuBar').hide();			else				$$('containerMenuBar').show();		});}	L3.slideLeftStack = function slideLeftStack(newPage) {	if (L3.stack[L3.stack.length-1] != newPage) {		L3.stack.push(newPage);		$('#' + newPage).css('z-index', 50000 - (1000 * L3.stack.length));		$$(newPage).show();		$('#' + L3.stack[L3.stack.length-2]).hide('slide', {direction: 'left'}, function() {				$$('homeButton').show();			});	}}L3.slideRightStack = function slideRightStack() {	$('#' + L3.stack[L3.stack.length-2]).show('slide', {direction: 'left'}, function() {			$$(L3.stack[L3.stack.length-1]).hide();			L3.stack.pop();			if (L3.stack.length == 1)				$$('homeButton').hide();			else				$$('homeButton').show();		});}	L3.homeButtonClick = function homeButtonClick() {	while (L3.stack.length > 2) {		var i = L3.stack.length - 2;		$$(L3.stack[i]).hide();		L3.stack.splice(i, 1);	}		$$('homeButton').hide();	L3.slideRightStack();}L3.homeButtonSimple = function homeButtonSimple() {	while (L3.stack.length > 2) {		var i = L3.stack.length - 2;		$$(L3.stack[i]).hide();		L3.stack.splice(i, 1);	}		$$('containerMenuBar').hide();	L3.slideRightStack();}L3.numberToWord = function numberToWord(num) {	switch (num) {		case 0:			return 'no';		case 1:			return 'one';		case 2:			return 'two';		case 3:			return 'three';		case 4:			return 'four';		case 5:			return 'five';		case 6:			return 'six';		case 7:			return 'seven';		case 8:			return 'eight';		case 9:			return 'nine';		case 10:			return 'ten';		default:			return String(num);	}}L3.convertBallotToPDF = function convertBallotToPDF(campaigns) {	var p = sources.currentPerson;		var doc = new jsPDF();	var xStart = 20;	var yStart = 20;	var xCoord = xStart;	var yCoord = yStart;	var lineHeight = 10;		doc.setFontSize(24);	doc.text(xCoord, yCoord, 'StrawPoll™ Sample Ballot');		doc.setFontSize(18);	yCoord += lineHeight;	doc.text(xCoord, yCoord, 'for the address:');		xCoord += 20;	yCoord += lineHeight;	doc.text(xCoord, yCoord, p.address1);	if(p.address2) {		yCoord += lineHeight;		doc.text(xCoord, yCoord, p.address2);	}	yCoord += lineHeight;	doc.text(xCoord, yCoord, p.city + ', ' + p.state + '  ' + p.zip);		xCoord = xStart;	var yBoxStart = yCoord;	yCoord += lineHeight;	var xCol1 = xStart + 5;	var xCol2 = xStart + 35;	var xCol3 = xStart + 65;	var xCol4 = xStart + 95;	var xCol5 = xStart + 105;	doc.setFontSize(14);	campaigns.toArray('districtType, districtName, candidateName, candidateParty, incumbent', {		onSuccess: function(event) {			var c = event.result;			for (var i = 0; i < c.length; i++) {				yCoord += lineHeight;				doc.text(xCol1, yCoord, c[i].districtType.trim());				doc.text(xCol2, yCoord, c[i].districtName.trim());				doc.text(xCol3, yCoord, c[i].candidateName.trim());				doc.text(xCol4, yCoord, c[i].candidateParty.trim());				doc.text(xCol5, yCoord, (c[i].incumbent?' [I]':''));			}		}	});	yCoord += lineHeight;	doc.rect(xStart - 5, yBoxStart, 130, yCoord - yBoxStart); // empty red square		doc.addPage();	// Output as Data URI	doc.output('datauri');}